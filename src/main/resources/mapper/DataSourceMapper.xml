<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pseudovector.dbdocs.dao.DataSourceMapper">

    <resultMap id="TableInfoResultMap" type="com.pseudovector.dbdocs.entity.Table">
        <result property="catalog" column="table_catalog" />
        <result property="schema" column="table_schema" />
        <result property="name" column="table_name" />
        <result property="comment" column="table_comment" />
        <collection property="columns" ofType="com.pseudovector.dbdocs.entity.Column">
            <result property="name" column="column_name" />
            <result property="type" column="column_type" />
            <result property="comment" column="column_comment" />
            <result property="nullable" column="is_nullable" />
            <result property="primaryKey" column="is_primary" />
            <result property="unique" column="is_unique" />
            <result property="foreignKeyTable.catalog" column="referenced_table_catalog" />
            <result property="foreignKeyTable.schema" column="referenced_table_schema" />
            <result property="foreignKeyTable.name" column="referenced_table_name" />
            <result property="foreignKeyColumn.name" column="referenced_column_name" />
        </collection>
    </resultMap>

    <sql id="TableInfoColumnList">
        LOWER(t.table_catalog) AS table_catalog,
        LOWER(t.table_schema) AS table_schema,
        LOWER(t.table_name) AS table_name,
        LOWER(t.table_comment) AS table_comment,
        LOWER(c.column_name) AS column_name,
        LOWER(c.column_type) AS column_type,
        LOWER(c.column_comment) AS column_comment,
        CASE WHEN c.is_nullable = 'YES' THEN 1 ELSE 0 END 'is_nullable',
        LOWER(p.table_catalog) AS referenced_table_catalog,
        LOWER(p.referenced_table_schema) AS referenced_table_schema,
        LOWER(p.referenced_table_name) AS referenced_table_name,
        LOWER(p.referenced_column_name) AS referenced_column_name,
        CASE WHEN UPPER(q.constraint_type) LIKE '%PRIMARY%' THEN 1 ELSE 0 END 'is_primary',
        CASE WHEN UPPER(s.constraint_type) LIKE '%UNIQUE%' THEN 1 ELSE 0 END 'is_unique' 
    </sql>

    <select id="getTables" resultMap="TableInfoResultMap">
        SELECT
            <include refid="TableInfoColumnList"></include> 
        FROM information_schema.tables t 
        LEFT JOIN information_schema.`columns` c ON (c.table_catalog = t.table_catalog AND c.table_schema = t.table_schema AND c.table_name = t.table_name)
        LEFT JOIN (
            SELECT
                kcu.table_catalog, 
                kcu.table_schema,
                kcu.table_name,
                kcu.column_name,
                kcu.referenced_table_schema,
                kcu.referenced_table_name,
                kcu.referenced_column_name
            FROM information_schema.key_column_usage kcu 
            WHERE kcu.referenced_column_name is not null
        ) p ON (p.table_catalog = c.table_catalog AND p.table_schema = c.table_schema AND p.table_name = c.table_name AND p.column_name = c.column_name)
        LEFT JOIN (
            SELECT 
                tc1.constraint_catalog,
                tc1.table_schema,
                tc1.table_name,
                kcu1.column_name,
                tc1.constraint_type
            FROM information_schema.table_constraints tc1
            LEFT JOIN information_schema.key_column_usage kcu1 USING (constraint_catalog, constraint_schema, constraint_name, table_schema, table_name)
            WHERE 1=1
            AND upper(tc1.constraint_type) LIKE '%PRIMARY%'
        ) q ON (q.constraint_catalog = c.table_catalog AND q.table_schema = c.table_schema AND q.table_name = c.table_name AND q.column_name = c.column_name)
        LEFT JOIN (
            SELECT DISTINCT 
                tc1.constraint_catalog,
                tc1.table_schema,
                tc1.table_name,
                kcu1.column_name,
                tc1.constraint_type
            FROM information_schema.table_constraints tc1
            LEFT JOIN information_schema.key_column_usage kcu1 USING (constraint_catalog, constraint_schema, constraint_name, table_schema, table_name)
            WHERE 1=1
            AND upper(tc1.constraint_type) LIKE '%UNIQUE%'
        ) s ON (s.constraint_catalog = c.table_catalog AND s.table_schema = c.table_schema AND s.table_name = c.table_name AND s.column_name = c.column_name)
        WHERE
            1=1
            AND upper(t.table_type) LIKE '%TABLE%'
            AND t.table_schema = #{dbName} 
        order by t.table_catalog, t.table_schema, t.table_name, c.column_name
    </select>
</mapper>